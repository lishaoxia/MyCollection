Git分支详解参考：
分支管理组成

1.1、master主干

在版本管理中，代码库应该仅有一个主干。此主干是和当前生产保持一致的，是可用的、稳定的可直接发布的版本，不能再主干上进行任何开发操作。git主干的名字，默认叫做 master，它是自动建立的。

1.2、develop主开发分支

因为不能在主干master上进行开发，那么就需要在基于主干master的基础上，创建一个开发主分支develop，开发主分支develop的代码永远是最新的，所有的新功能都是以此分支为基础进行开发的，该分支只是做合并操作，也不能在此分支进行实际开发。

1.3、test测试分支

test分支它是指发布正式版本之前（即合并到 master分支之前），我们需要有一个预发布的版本进行测试。
预发布分支是从develop分支上面分出来的，预发布部署生产验证无误，结束以后，必须向下合并进 master和develop分支以及develop衍生所有开发分支，保证各分支基线版本与生产基线同步。

1.4、feature功能开发分支

功能开发分支，在develop上创建分支，采用“feature-” +“分支创建时间”+ “批次名称-”的命名规范。
例如：“feature-20190301-XXX”
此分支既作为需求开发分支又作为需求测试分支，所有需上线内容需在当前分支充分测试通过后，才可提交test分支与其他待上线分支代码进行合并，然后进行test分支回归测试。


1.5、hotfix紧急bug分支

项目上线后会遇到一些需要紧急修复的bug，那么就需要创建一个紧急bug修改分支，此分支需要从master直接拉取分支进行开发修改，修复完成后必须向下合并进 master和develop分支以及develop衍生所有分支，保证各分支基线版本与生产基线同步。
采用
“hotfix-” +“分支创建时间”+“bug号或bug描述”的命名规范。
例如：“hotfix-20190116-001”


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

分支管理
分支命名
master 分支

master 为主分支，也是用于部署生产环境的分支，确保master分支稳定性
master 分支一般由develop以及hotfix分支合并，任何时间都不能直接修改代码
develop 分支

develop 为开发分支，始终保持最新完成以及bug修复后的代码
一般开发的新功能时，feature分支都是基于develop分支下创建的
feature 分支

开发新功能时，以develop为基础创建feature分支
分支命名: feature/ 开头的为特性分支， 命名规则: feature/user_module、 feature/cart_module
release分支

release 为预上线分支，发布提测阶段，会release分支代码为基准提测
当有一组feature开发完成，首先会合并到develop分支，进入提测时，会创建release分支。
如果测试过程中若存在bug需要修复，则直接由开发者在release分支修复并提交。
当测试完成之后，合并release分支到master和develop分支，此时master为最新代码，用作上线。
hotfix 分支

分支命名: hotfix/ 开头的为修复分支，它的命名规则与 feature 分支类似
线上出现紧急问题时，需要及时修复，以master分支为基线，创建hotfix分支，修复完成后，需要合并到master分支和develop分支
常见任务
增加新功能
(dev)$: git checkout -b feature/xxx            # 从dev建立特性分支
(feature/xxx)$: blabla                         # 开发
(feature/xxx)$: git add xxx
(feature/xxx)$: git commit -m 'commit comment'
(dev)$: git merge feature/xxx --no-ff          # 把特性分支合并到dev

修复紧急bug
(master)$: git checkout -b hotfix/xxx         # 从master建立hotfix分支
(hotfix/xxx)$: blabla                         # 开发
(hotfix/xxx)$: git add xxx
(hotfix/xxx)$: git commit -m 'commit comment'
(master)$: git merge hotfix/xxx --no-ff       # 把hotfix分支合并到master，并上线到生产环境
(dev)$: git merge hotfix/xxx --no-ff          # 把hotfix分支合并到dev，同步代码

测试环境代码
(release)$: git merge dev --no-ff             # 把dev分支合并到release，然后在测试环境拉取并测试

生产环境上线
(master)$: git merge release --no-ff          # 把release测试好的代码合并到master，运维人员操作
(master)$: git tag -a v0.1 -m '部署包版本名'  #给版本命名，打Tag
(dev)$: git merge release --no-ff  			  # 把release测试好的代码合并到dev，


























