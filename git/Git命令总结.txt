1、配置git
$ git config --global user.name "lishaoxia"
$ git config --global user.email "l2638581@163.com"

2、创建版本库
$ cd /d
$ cd pycharm/PycharmProjects/Test   #也可以创建一个空目录
$ git init  #通过git init命令把这个目录变成Git可以管理的仓库(这个目录称为工作区，目录里的.git称为版本库)

3、添加文件到暂存区
$ git add test.txt
$ git add .    #添加当前目录的所有文件

4、把文件提交到仓库
$ git commit -m "本次提交说明" 
#执行commit前要先执行git add,比如删除了某个文件夹后，要先执行git add .  ,再执行commit
#可以多次添加文件到暂存区，一次提交到仓库
#如果工作区添加修改的文件到暂存区后，在工作区又修改了此文件，这时提交，只提交暂存区的修改内容

5、查看版本库当前状态
$ git status  #显示所有改动文件和状态（新增、修改、删除）

如果git status查看git状态提示中文乱码:274\232\350\256\256\346\200\273\347\273\223.txt
git bash 终端输入命令：git config --global core.quotepath false

6、查看修改文件的改动内容
$ git diff test.txt

7、查看前面的版本记录，比如从版本1.6回退到了1.5，此时使用git log 只显示1.5版本以前的提交记录
$ git log   #显示当前版本之前的所有提交版本，从最近到最远的提交日志
git log  --pretty=oneline 参数，一条记录一行显示，便于观看

8、版本回退（回到过去）
$ git reset --hard HEAD^
#用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，往上100个版本写成HEAD~100

9、回到指定版本
$ git reset --hard 1094a  #1094a是版本序列号的前几位，位数没有限制，确定唯一即可

10、查看所有版本记录（包括commit和reset的操作）
$ git reflog

11、版本回退后再回到回退前的版本
$ git reflog  通过版本日志查看回退前的版本序列号
$ git reset --hard 8349db3(回退前版本序列号)

12、丢弃工作区的修改
$ git checkout -- test.txt		
#--前后有空格，不可省略"--",没有"--"，就变成了“切换到另一个分支”的命令
#实质是用当前版本库的文件替换工作区的文件

13、丢弃添加到暂存区的修改
$ git reset HEAD test.txt	#git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示退回到最新的版本，即最后一个提交后的版本。

14、工作区误删了文件，想要恢复
$ git checkout -- test.txt  #同12条，实质是用当前版本库的文件替换工作区的文件

15、工作区删除文件，版本库也要删除此文件
$ rm  test.txt  #工作区删除，也可以手动删除
$ git rm test.txt
$ git commit -m "remove test.txt"

16. 查看当前登录账号：
$  git config user.name
	查看当前登录邮箱：
$  git config user.email
	修改用户名和邮箱：
$  git config --global user.name "Your_username"
$  git config --global user.email "Your_email"

17、Git版本控制中的文件分为以下四种状态：
untracked：未跟踪，一般为新建的文件，此文件未加入到git库，不参与版本控制，通过git add加入暂存，参与版本控制。
unmodify：文件已入到git库中，未修改，文件内容与本地库的文件快照内容完全一致。
modified：文件已入到git库中，经过修改，文件内容与本地库的文件快照内容不一致，untracked和modified都是未暂存状态。
staged：暂存状态

18、git clean 用法
git clean -n		仅列出将要被删除的文件，但没有删除文件。
git clean -f		删除当前目录下所有untracked的文件，不会删除 .gitignore 文件里面指定的文件夹和文件。
git clean -f <path> 删除指定目录下所有untracked的文件，不会删除 .gitignore 文件里面指定的文件夹和文件。
git clean -fd 	 	删除当前目录下untracked的文件和文件夹
git clean -xf		删除当前目录下所有untracked的文件，不管是否是 .gitignore 文件里面指定的文件夹和文件


----------------------------------------远程仓库GitHub-----------------------------------------

1、本地Git仓库和GitHub仓库之间ssh加密
$ ssh-keygen -t rsa -C "youremail@example.com"
#执行此命令后，会在用户主目录生成.ssh目录，里面有id_rsa和id_rsa.pub两个文件
#登陆GitHub，打开“Account settings”--“SSH Keys”页面,点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容

2、本地库与远程库关联
$ git remote add origin git@github.com:lishaoxia/AutoTestDemo.git
#远程库的名字就是origin，这是Git默认的叫法，也可以改成别的

3、本地库删除远程库管理
$ git remote rm origin

4、本地库修改远程库管理
$ git remote origin set-url git@github.com:lishaoxia/AutoTestDemo.git

5、推送本地仓库的文件到远程仓库
$ git push origin master	#把本地master分支的最新修改推送至GitHub，推送dev分支就是git push origin dev

6、克隆远程仓库到本地,不指定目录时，会将项目克隆到当前目录下，生成与远程项目名称相同的目录，项目目录则为工作目录。
	如果在后面指定目录，会将远程项目内的文件克隆到指定目录，不会生成远程项目名称相同的目录
	
$ git clone git@github.com:lishaoxia/MyCollection.git		（如果在e盘执行命令，工作目录为/e/MyCollection）
$ git clone git@github.com:lishaoxia/MyCollection.git ./ABC  （如果在e盘执行命令，工作目录为/e/ABC）

备注：上面两种命令的目标目录，不管是当前目录或者是指定的目录不能有.git文件夹。克隆完成后会在工作目录生成.git文件夹。

7、拉取远程变更内容
$ git pull origin master

8、获取变更并合并，操作等价于git pull 
$ git fetch origin 显示远程更新的内容
$ git merge origin/master 将远程更新内容同步到本地

------------------------------------------分支--------------------------------------------------
1、查看当前分支，
$ git branch	#当前分支前面会标一个*号

2、创建dev分支
$ git branch dev

3、切换到dev分支
$ git checkout dev

4、创建并切换dev分支，相当于上面两条命令
$ git checkout -b dev

5、dev分支编辑文件，提交到dev分支
$ git checkout dev
$ vi test.txt(编辑)		#编辑后master和dev分支查看test.txt 内容都是编辑后的内容，由此可见分支共用一个工作区
$ git add test.txt		#添加后master和dev分支查看test.txt 内容都是编辑后的内容，由此可见分支共用一个暂存区
$ git commit -m "dev分支修改" 	#提交后，只有在dev分支，test.txt是修改后的内容，由此可见，commit将修改提交到了当前分支(dev分支)

6、dev分支的修改合并到master分支上
$ git checkout master		#先切换到master分支
$ git merge dev 	#git merge命令用于合并指定分支到当前分支

7、合并完成后，就可以放心地删除dev分支了
$ git branch -d  dev		#git branch -D  dev 强行删除，用户删除没有被合并的分支，

8、解决分支冲突，dev分支test.txt文件新增“dev分支新增一行”，添加并提交，切换到master分支在test.txt文件新增“master分支新增一行”，添加并提交
	此时合并dev分支
$ git merge dev		#Merge conflict in test.txt 提示合并时test.txt文件冲突
$ cat test.txt 		#此时可以查看到冲突的内容，Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容
$ git merge --abort		#先中止本次合并
$ vi test.txt	#修改冲突的文件，可以在master分支修改，也可以在dev分支修改，只要保证修改后两个分支的内容一致
$ git add test.txt		#重新添加
$ git commit test.txt -m "解决test.txt文件冲突"
$ git merge dev		#提交后重新合并

9、图形查看上面29分支的合并情况
$ git log --graph --pretty=oneline --abbrev-commit			#下方*号记录了本次合并两个分支的提交记录
*   4d89d85 (HEAD -> master) Merge branch 'dev'				 可以看出新建dev分支后，dev提交了一次 -m “dev新增一行” a816187
|\															 master分支提交第一次 -m “master分支新增一行” 61fc33a
| * a816187 (dev) dev新增一行								 master分支提交第二次 -m “解决冲突”
* | e1656cd 解决冲突										 master合并dev 
* | 61fc33a master分支新增一行
|/
* acbe369 dev分支修改
* 8349db3 (origin/master) 更新testgit.txt文件
* a8eeb37 提交testgit.txt文件
* 5c52a58 提交文件

10、bug分支，如果工作区工作到一半，这时要创建一个bug分支修改bug,工作区的内容可以先储存起来
$ git stash 		#储存工作区改动
$ git stash list	#查看储存列表
$ git stash pop 	#恢复工作区的改动

11、多人协作，多人协作的工作模式通常是这样：
1、首先，可以试图用git push origin <branch-name>推送自己的修改；
2、如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
3、如果合并有冲突，则解决冲突，并在本地提交；
4、没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
	#如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，
	用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
	
12、查看远程库信息
$ git remote -v 


-------------------------------------------------标签--------------------------------------------------------
1、添加Tag,本版本最后一次提交了，需要定义一个版本，可以打一个标签
$ git tag V1.0

2、默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
$ git tag v0.9 f52c633		#后面的字符串是commit id

3、还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
$ git tag -a v0.1 -m "version 0.1 released" 1094adb

4、用命令git show <tagname>可以看到说明文字：
$ git show v0.1

5、如果标签打错了，也可以删除：
$ git tag -d v0.1

6、如果要推送某个标签到远程，使用命令git push origin <tagname>：
$ git push origin v1.0
#或者，一次性推送全部尚未推送到远程的本地标签：
$ git push origin --tags

7、如果标签已经推送到远程，要删除远程标签就麻烦一点
$ git tag -d v0.9	#先从本地删除
$ git push origin :refs/tags/v0.9		#然后，从远程删除


aaaaaa































